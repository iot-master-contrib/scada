import fs from "fs"
import path from "path"
import xml2js from 'xml2js'
//const camelcase = require('camelcase')
import camelCase from 'camelcase';

import {fileURLToPath} from 'url'

const __filenameNew = fileURLToPath(import.meta.url)
const __dirnameNew = path.dirname(__filenameNew)

const dir = __dirnameNew //__dirname

const prefix = ""

let files = fs.readdirSync(dir)

files.forEach(async (file) => {
    const filename = path.join(dir, file)
    const stat = fs.statSync(filename)
    const ext = path.extname(file)
    if (stat.isFile() && ext === ".svg") {
        const param = path.basename(file, ext)
        const out = path.join(__dirnameNew, param + ".ts")

        fs.writeFileSync(out, "//!!! generated by svg2meta.mjs\n\n")
        fs.appendFileSync(out, `// ${filename} \n`)

        let variable = prefix + param + "_meta"
        variable = camelCase(variable, {pascalCase: true})

        fs.appendFileSync(out, `export const  ${variable} = `)

        let meta = await parseSvg(filename)
        const content = JSON.stringify(meta, undefined, '\t')

        fs.appendFileSync(out, content)
        fs.appendFileSync(out, "\n")
    }
})

const tags = ["path", "rect", "line", "circle", "ellipse", "polyline", "polygon"]


//number, string
const refs = [
    "d", //path
    "x", "y", "width", "height", //rect
    "x1","y1","x2","y2", //line
    "rx","ry","cx","cy", //ellipse
    "r", //circle
    "points", //poly
    "fill",
    "stroke",
    "stroke-width",
    "stroke-linecap",
    "stroke-linejoin",
]

function parseRefs(xml) {
    const attrs = {}

    refs.forEach(ref=>{
        if (xml.hasOwnProperty(ref)) {
            const value = xml[ref]
            const key = camelCase('ref-' + ref)
            attrs[key] = value
            if (/^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$/.test(value))
                attrs[key] = parseFloat(value)
        }
    })

    return attrs
}

async function parseSvg(filename) {
    const content = fs.readFileSync(filename)
    const parser = new xml2js.Parser();
    const obj = await parser.parseStringPromise(content.toString())
    //console.dir(obj.svg)

    const markup = {
        root: obj.svg.$,
        markup: [],
        attrs: {}
    }

    for (let k in obj.svg) {
        if (!obj.svg.hasOwnProperty(k)) continue
        if (tags.indexOf(k) === -1) continue

        obj.svg[k].forEach((s, i) => {
            markup.markup.push({
                tagName: k,
                selector: k + i,
            })
            markup.attrs[k + i] = parseRefs(s.$)
        })
    }

    return markup
}
